/*

noise.shd

*/
#ifndef NOISE_SHD
#define NOISE_SHD

vec3 hash(in vec3 p) {
    const mat3 BASIS = mat3(vec3(127.1, 311.7, 74.7), vec3(269.5, 183.3, 246.1), vec3(113.5, 271.9, 124.6));
    return 2.0 * fract(sin(BASIS * p) * 43758.5453123) - 1.0;
}

vec2 hash(in vec2 p) {
    const mat2 BASIS = mat2(vec2(127.1, 311.7), vec2(269.5, 183.3));
    return 2.0 * fract(sin(BASIS * p) * 43758.5453123) - 1.0;
}

float gradientNoise(in vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    vec2 u = f * f * (-2.0 * f + 3.0);

    return mix( mix( dot( hash(i),                   f), 
                     dot( hash(i + vec2(1.0, 0.0) ), f - vec2(1.0, 0.0)), u.x),
                mix( dot( hash(i + vec2(0.0, 1.0) ), f - vec2(0.0, 1.0)),
                     dot( hash(i + vec2(1.0, 1.0) ), f - vec2(1.0, 1.0)), u.x), u.y);
}

float gradientNoise(in vec3 p) {
    vec3 i = floor(p);
    vec3 f = fract(p);
    vec3 u = f * f * (-2.0 * f + 3.0);

    return mix( mix( mix( dot(hash(i),                       f), 
                          dot(hash(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),
                     mix( dot(hash(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)), 
                          dot(hash(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),
                mix( mix( dot(hash(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)), 
                          dot(hash(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),
                     mix( dot(hash(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)), 
                          dot(hash(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z );
}

float simplexNoise(in vec2 p) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

    vec2 i = floor(p + (p.x + p.y) * K1);
    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = step(a.yx, a.xy);    
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0 * K2;

    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
    vec3 n = h * h * h * h * vec3(dot(a, hash(i)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));

    return dot(n, vec3(70.0));
}

#endif // NOISE_SHD