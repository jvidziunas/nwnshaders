/*

fslit_sss_nm.shd

*/
#include "common"
#include "lit_common"
#include "noise"
#include "sdf"

const int   MAX_LIGHTS     = 8;
const float NO_ATTENUATION = 0.0;

uniform sampler2D texUnit0;	// base map
uniform sampler2D texUnit1;	// normal map
uniform sampler2D texUnit2;	// specular map
uniform sampler2D texUnit3; // preintegrated scattering lookup table

uniform         int  texture0Bound;

uniform lowp    vec4 fogColor;

uniform lowp    vec4  lightAmbient        [MAX_LIGHTS];
uniform lowp    vec4  lightDiffuse        [MAX_LIGHTS];
uniform mediump vec4  lightPosition       [MAX_LIGHTS];
uniform mediump float lightQuadraticAtten [MAX_LIGHTS];
uniform         int   numLights;

uniform mediump	vec4  materialFrontAmbient;
uniform mediump	vec4  materialFrontDiffuse;
uniform mediump	vec4  materialFrontSpecular;
uniform mediump	vec4  materialFrontEmissive;
uniform lowp    vec4  frontLightModelProductSceneColor;

uniform         int   keyholeCanDissolve;
uniform         vec3  playerPosition;
uniform         vec3  cameraPosition;

varying         vec4  vPosOut;
varying highp   vec3  vWorldCoord;
varying         vec3  vNormalOut;
varying         vec3  vTangentOut;
varying         float fTextureHandedness;
varying         vec2  vTc;
varying         vec4  vColorOut;
varying         vec3  vStaticLightDirOut;
varying         float fFogFragCoord;

struct Surface {
	vec3  normal;
	vec3  toEye;
	float alpha;
	float curvature;
};

struct Light {
	vec3  direction;
	vec3  ambient;
	vec3  color;
	float attenuationCoefficient;
};

void main(void) {
	// Isolate this conditional in hopes that the driver will use dynamic branching.
    if (keyholeCanDissolve != 0) {
        if ((keyholeSdf(playerPosition, cameraPosition, vWorldCoord) + 0.2 * gradientNoise(vPosOut.xyz * 8.0)) < 0.0) {
            discard;
        }
    }

	vec4  baseColor = texture0Bound != 0 ? asLinear(texture2D(texUnit0, vTc.xy)) : vec4(1.0);
	vec3  normal    = buildTSB(vNormalOut, vTangentOut, fTextureHandedness) * unpackNormal(texture2D(texUnit1, vTc.xy).rgb);
	vec4  specular  = asLinear(texture2D(texUnit2, vTc.xy));
	float opacity   = baseColor.a * vColorOut.a * materialFrontDiffuse.a;
}