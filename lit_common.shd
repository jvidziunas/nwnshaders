/*

lit_common.shd

*/
#ifndef LIT_COMMON_SHD
#define LIT_COMMON_SHD

#include "common"

#define NO_ATTENUATION 0.0

const float fShininessMax  = 80.0;
const float fShininessMin  = 8.0;

float asRoughness(in float specAlpha) {
	return clamp(pow(2.0 / (specAlpha + 2.0), 0.25), 1e-5, 1.0);
}

float wrapDiffuse(in float nDotL, in float wrapFactor) {
	float wrapCoefficient = (1.0 + wrapFactor);
	return pow(saturate(nDotL + wrapFactor) / wrapCoefficient, wrapCoefficient);
}

vec3 shiftTangent(in vec3 tangent, in vec3 normal, in float amount) {
	return normalize(tangent + normal * amount);
}

float fresnelReflectance(in float nDotH) {
    return pow5(1.0 - nDotH);
}

//=============================================================================
//
// getToksvigRoughness()
//
// Adjusts a Beckmann roughness^2/alpha coefficient according to normal map
// variations to reduce highlight shimmering. `bump` should not be normalized,
// though the function does return a meaningful (if ineffectual) result in
// this case.
//
//=============================================================================
float getToksvigAlpha(inout vec3 bump, in float alpha) {
    float len = length(bump);
    // Sneak a normalize in here since it's useful.
    bump /= len;

    /* While the texture could in theory return an all-0 result, this is very unlikely under typical use.
     * Since a saturate modifier will always be cheaper than an arithmetic clamp (or, in the worst case,
     * exactly equal if H/W lacks a notion of said modifier) prefer the [0-1] range over biasing, even
     * though this could result in divide-by-zero. */
    float rlen     = 1.0 / saturate(len);
    float variance = (1.0 - rlen) / rlen;
    return saturate( alpha + min( 2.0 * variance, 0.18 ) );
}

float2 getToksvigAlpha(inout vec3 bump, in float2 alpha) {
    float len = length(bump);
    // Sneak a normalize in here since it's useful.
    bump /= len;

    /* While the texture could in theory return an all-0 result, this is very unlikely under typical use.
     * Since a saturate modifier will always be cheaper than an arithmetic clamp (or, in the worst case,
     * exactly equal if H/W lacks a notion of said modifier) prefer the [0-1] range over biasing, even
     * though this could result in divide-by-zero. */
    float rlen     = 1.0 / saturate(len);
    float variance = (1.0 - rlen) / rlen;
    return saturate( alpha + vec2( min( 2.0 * variance, 0.18 ) ) );
}

float remapGgx(inout vec2 bump) {
    float len = length(bump);
    /* [Chan 2018, "Material Advances in Call of Duty: WWII"] rational function fit for GGX gloss table.
     * This is in Horner form to take advantage of fused multiply-adds where available. */
    float numerator = len * ((len * (len * 0.56 + 7.42)) + 0.094) + 0.667;
    float denominator = 1.0 - len * (len * 8.84 + 1.09);
    return numerator / denominator;
}

float getSmithTerm(in float product, in float alpha) {
    return product + sqrt(product * (product - product * alpha) + alpha);
}

float getSmithTerm(in vec3 product, in vec2 alpha) {
    return sqrt(dot(product.xy * product.xy, alpha) + product.z * product.z);
}

//=============================================================================
//
// getSmithVisibility_fast()
//
// Estimates the fraction of surface microfacets not occluded by other
// (implicit/analytic) surface microfacets along the given light and eye
// directions. Reuses light-independent calculations to improve efficiency.
//
//=============================================================================
float getSmithVisibility_fast(in float smithE, in float nDotL, in float alpha) {
    return 1.0 / (smithE * /*smithL=*/getSmithTerm(nDotL, alpha));
}

//=============================================================================
//
// getSmithVisibility_fast()
//
// Estimates the fraction of surface microfacets not occluded by other
// (implicit/analytic) surface microfacets along the given light and eye
// directions. Reuses light-independent calculations to improve efficiency.
//
//=============================================================================
float getSmithVisibility_fast(in float smithE, in float nDotE, in vec3 productL, in vec2 alpha) {
    return 0.5 / max((nDotL * smithE) + (nDotE * /*smithL=*/getSmithTerm(productL, alpha)), 1e-5);
}

//=============================================================================
//
// getSmithVisibility()
//
// Estimates the fraction of surface microfacets not occluded by other
// (implicit/analytic) surface microfacets along the given light and eye
// directions.
//
//=============================================================================
float getSmithVisibility(in float nDotE, in float nDotL, in float alpha) {
    return getSmithVisibility_fast(/*smithE=*/getSmithTerm(nDotE, alpha), nDotL, alpha);
}

//=============================================================================
//
// getSmithVisibility()
//
// Estimates the fraction of surface microfacets not occluded by other
// (implicit/analytic) surface microfacets along the given light and eye
// directions.
//
//=============================================================================
float getSmithVisibility(in vec3 productE, in vec3 productL, in vec2 alpha) {
    return getSmithVisibility_fast(/*smithE=*/getSmithTerm(productE, alpha), productE.z, productL, alpha);
}

//=============================================================================
//
// getAshikhminVisibility()
//
// Estimates the fraction of surface microfacets not occluded by other
// (implicit/analytic) surface microfacets along the given light and eye
// directions.
// [Ashikhmin, Premoze 2007, "Distribution-based BRDFs"]
//
//=============================================================================
float getAshikhminVisibility(in float nDotE, in float nDotL) {
    return 1.0 / max(4.0 * (nDotL + nDotE - nDotL * nDotE), 1e-4);
}

//=============================================================================
//
// getGgx()
//
// Estimates the fraction of surface microfacets oriented to reflect light
// along the eye direction.
//
//=============================================================================
float getGgx(in float nDotH, in float alpha) {
    float d = (nDotH * alpha - nDotH) * nDotH + 1.0;
    return alpha / (PI * d * d);
}

//=============================================================================
//
// getGgx()
//
// Estimates the fraction of surface microfacets oriented to reflect light
// along the eye direction, using anisotropic parameterization from
// [McAuley 2015]
//
//=============================================================================
float getGgx(in vec3 productH, in vec2 alpha) {
	float a2 = alphaT * alphaB;
	vec3  v  = vec3(productH.x / alpha.x, productH.y / alpha.y, saturate(productH.z));
	float d  = dot(v, v);
	return 1.0 / (a2 * d * d);
}

//=============================================================================
//
// getCharlieD()
//
// Estimates the fraction of surface microfacets oriented to reflect light
// along the eye direction, using parameterization from
// [Estevez, Kulla 2017, "Production Friendly Microfacet Sheen BRDF"]
//
//=============================================================================
float getCharlieD(in float nDotH, in float roughness) {
    float rcpR  = 1.0 / roughness;
    float cos2h = nDotH * nDotH;
    float sin2h = 1.0 - cos2h;
    return (2.0 + rcpR) * pow(sin2h, rcpR * 0.5) / (2.0 * PI);
}

//=============================================================================
//
// getApproxTranslucency()
//
// Approximate forward-scattering phase function similar to Henyey-Greenstein.
// [Brisebois 2012, "Approximating Translucency Revisited with Simplified Spherical Gaussian"]
//
//=============================================================================
float getApproxTranslucency(in vec3 toLight, in vec3 toEye, in float scatterPower, in float scatterScale, in float ambientScattering, in float thickness) {
//    vec3  incident = toLight + normal * normalDistortion;
    float phase = exp2(saturate(dot(toEye, -toLight)) * scatterPower - scatterPower) * scatterScale;
    return (phase + ambientScattering) * thickness;
}

#endif // LIT_COMMON_SHD