/*

vslitnt_sm.shd

*/
#include "common"

#define MAX_LIGHTS 8

uniform highp   mat4  m_mvp;
uniform highp   mat4  m_mv;
uniform highp   mat4  m_m;
uniform highp   mat3  m_normal;

uniform         int   fogEnabled;
uniform mediump float fogStart;
uniform mediump float fogEnd;

uniform lowp    vec4  lightAmbient        [MAX_LIGHTS];
uniform lowp    vec4  lightDiffuse        [MAX_LIGHTS];
uniform mediump vec4  lightPosition       [MAX_LIGHTS];
uniform mediump float lightQuadraticAtten [MAX_LIGHTS];
uniform         int   numLights;

uniform mediump vec4  materialFrontAmbient;
uniform mediump vec4  materialFrontDiffuse;
uniform mediump vec4  materialFrontEmissive;
uniform lowp    vec4  frontLightModelProductSceneColor;

attribute       vec4  vPos;
attribute       vec3  vNormal;

varying highp   vec4  vPosOut;
varying highp   vec3  vWorldCoord;
varying         vec2  vTcEnv;
varying         vec4  vColorOut;
varying         float fFogFragCoord;

vec4 computeLighting(in vec3 normal, in vec3 position) {
    vec3 ambient = vec3(0.0);
    vec3 diffuse = vec3(0.0);

    for (int i = 0; i < numLights; i++) {
        vec3  toLight     = lightPosition[i].xyz - position;
        float attenuation = 1.0 / (lightQuadraticAtten[i] * dot(toLight, toLight) + 1.0);
        float nDotL       = saturate(dot(normal, normalize(toLight)));

        ambient           += attenuation * lightAmbient[i].rgb;
        diffuse           += attenuation * nDotL * lightDiffuse[i].rgb;
    }

    vec3 color = frontLightModelProductSceneColor.rgb + materialFrontEmissive.rgb +
        ambient * materialFrontAmbient.rgb +
        diffuse * materialFrontDiffuse.rgb;

    return vec4(color, materialFrontDiffuse.a);
}

void main(void) {
    vec3 normal = normalize(m_normal * vNormal);

    gl_Position  = m_mvp * vPos;
    vPosOut      = m_mv * vPos;
    vWorldCoord  = (m_m * vPos).xyz;
   
    vTcEnv       = spheremapTransform(reflect(normalize(vPosOut.xyz), normal));
    vColorOut    = computeLighting(normal, vPosOut.xyz);

    fFogFragCoord = (fogEnabled != 0) ? ffog(vPosOut.z, fogStart, fogEnd) : 0.0;
}