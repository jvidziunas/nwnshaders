/*

vslit.shd

*/
#include "common"

#define MAX_LIGHTS 8

uniform highp   mat4  m_mvp;
uniform highp   mat4  m_mv;
uniform highp   mat4  m_m;
uniform highp   mat3  m_normal;
uniform highp   mat4  m_texture;

uniform         int   fogEnabled;
uniform mediump float fogStart;
uniform mediump float fogEnd;

uniform lowp    vec4  lightAmbient			[MAX_LIGHTS];
uniform lowp    vec4  lightDiffuse			[MAX_LIGHTS];
uniform mediump vec4  lightPosition			[MAX_LIGHTS];
uniform mediump float lightQuadraticAtten	[MAX_LIGHTS];
uniform         int   numLights;

uniform mediump vec4  materialFrontAmbient;
uniform mediump vec4  materialFrontDiffuse;
uniform mediump vec4  materialFrontEmissive;
uniform lowp    vec4  frontLightModelProductSceneColor;

attribute       vec4  vPos;
attribute       vec2  vTcIn;
attribute       vec4  vColor;
attribute       vec3  vNormal;

varying highp   vec4  vPosOut;
varying highp   vec3  vWorldCoord;
varying         vec2  vTc;
varying         vec4  vColorOut;
varying         float fFogFragCoord;

vec3 Ambient  = vec3(0.0);
vec3 Diffuse  = vec3(0.0);

void pointLight(in int i, in vec3 normal, in vec3 viewPosition) {
    vec3  toLight     = lightPosition[i].xyz - viewPosition;
    float attenuation = 1.0 / (lightQuadraticAtten[i] * dot(toLight, toLight) + 1.0);
    float nDotL       = saturate(dot(normal, normalize(toLight)));

    Ambient += attenuation * lightAmbient[i].rgb;
    Diffuse += attenuation * nDotL * lightDiffuse[i].rgb;
}

vec4 computeLighting(in vec3 normal, in vec3 viewPosition) {
    for (int i = 0; i < numLights; i++) {
        pointLight(i, normal, viewPosition);
    }

    vec3 color = vColor.rgb + frontLightModelProductSceneColor.rgb + materialFrontEmissive.rgb +
        Ambient * materialFrontAmbient.rgb +
        Diffuse * materialFrontDiffuse.rgb;

    return vec4(color, vColor.a * materialFrontDiffuse.a);
}

void main(void) {
    gl_Position = m_mvp * vPos;
    vPosOut     = m_mv  * vPos;
    vWorldCoord = (m_m  * vPos).xyz;

    vTc       = (m_texture * vec4(vTcIn.x, vTcIn.y, 0.0, 1.0)).xy;
    vColorOut = computeLighting(m_normal * vNormal, vPosOut.xyz);

    fFogFragCoord = (fogEnabled != 0) ? ffog(vPosOut.z, fogStart, fogEnd) : 0.0;
}