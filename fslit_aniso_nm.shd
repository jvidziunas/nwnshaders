/*

fslit_aniso_nm.shd

*/
#include "common"
#include "lit_common"
#include "sdf"

#define MAX_LIGHTS 8

uniform sampler2D texUnit0;	// base map
uniform sampler2D texUnit1;	// normal map
uniform sampler2D texUnit2;	// specular map
uniform sampler2D texUnit3; // multipurpose map

uniform         int  texture0Bound;

uniform lowp    vec4 fogColor;

uniform lowp	vec4  lightAmbient[MAX_LIGHTS];
uniform lowp	vec4  lightDiffuse[MAX_LIGHTS];
uniform mediump	vec4  lightPosition[MAX_LIGHTS];
uniform mediump float lightQuadraticAtten[MAX_LIGHTS];
uniform         int   numLights;

uniform mediump	vec4  materialFrontAmbient;
uniform mediump	vec4  materialFrontDiffuse;
uniform mediump	vec4  materialFrontEmissive;
uniform lowp    vec4  frontLightModelProductSceneColor;

uniform         int   keyholeCanDissolve;
uniform         vec3  playerPosition;
uniform         vec3  cameraPosition;

uniform         int   worldtimerTimeOfDay;

uniform         float anisotropy;

varying         vec4  vPosOut;
varying highp   vec3  vWorldCoord;
varying         vec2  vTc;
varying         vec4  vColorOut;
varying         vec3  vStaticLightDirOut;
varying         vec3  vNormalOut;
varying         vec3  vTangentOut;
varying lowp    float fTextureHandedness;
varying         float fFogFragCoord;

vec3 Ambient;
vec3 Diffuse;
vec3 Specular;

struct Surface {
	mat3  tangentBasis;
	vec3  toEye;
	vec2  alpha;
	float smithE;
};

struct Light {
	vec3  direction;
	vec3  ambient;
	vec3  color;
	float attenuationCoefficient;
};

void shadeSurface(in Surface surface, in Light light) {
	vec3  toLight     = normalize(light.direction);
	vec3  halfVector  = normalize(surface.toEye + toLight);
	float attenuation = 1.0 / (light.attenuationCoefficient * dot(light.direction, light.direction) + 1.0);
	vec3  productL    = surface.tangentBasis * toLight;
	vec3  productH    = surface.tangentBasis * halfVector;
	float f           = fresnelReflectance(productH.z);
	float d           = getGgx(productH, surface.alpha);
	float g           = getSmithVisibility_fast(surface.smithE, dot(surface.tangentBasis[2], surface.toEye), productL, surface.alpha);
	vec3  color       = saturate(productL.z) * attenuation * light.color;

	Ambient  += attenuation * light.ambient;
	Diffuse  += color;
	Specular += (d * g) * f * color;
}

//=============================================================================
//
// computeLighting()
//
// Calculates lighting contribution for all lights.
//
//=============================================================================
void computeLighting(in mat3 tangentBasis, in vec3 position, in vec2 roughness) {
	vec3    toEye   = normalize(-position); // Eye-space position, just need to normalize.
	vec2    alpha   = getToksvigAlpha(tangentBasis[2], roughness * roughness);
	float   smithE  = getSmithTerm(tangentBasis * toEye, alpha);
	Surface surface = Surface(tangentBasis, toEye, alpha, smithE);

	// Clear the light intensity accumulators
	Ambient  = vec3(0.0);
	Diffuse  = vec3(0.0);
	Specular = vec3(0.0);

	if (anyNonzero(vStaticLightDirOut)) {
		shadeSurface(surface, Light(vStaticLightDirOut, /*ambient =*/vec3(0.0), /*color =*/vColorOut.rgb, NO_ATTENUATION));
	} else {
		Ambient = vColorOut.rgb;
	}

	for (int light = 0; light < numLights; light++) {
		shadeSurface(surface, Light(/*direction =*/lightPosition[light].xyz - position, lightAmbient[light].rgb, lightDiffuse[light].rgb, lightQuadraticAtten[light]));
	}
}

void main(void) {
	vec4  baseColor    = (texture0Bound != 0) ? asLinear(texture2D(texUnit0, vTc.xy)) : vec4(1.0);
	mat3  tangentBasis = buildTSB(vNormalOut, vTangentOut, fTextureHandedness);
	vec3  normal       = tangentBasis * unpackNormal(texture2D(texUnit1, vTc.xy).rgb);
	vec4  specular     = asLinear(texture2D(texUnit2, vTc.xy));
	float opacity      = vColorOut.a * materialFrontDiffuse.a * texture2D(texUnit3, vTc.xy).r;

	computeLighting(mat3(tangentBasis[0], tangentBasis[1], normal), vPosOut.xyz, specular.a * (1.0 + anisotropy), specular.a * (1.0 - anisotropy));

	vec3 color = baseColor.rgb * (materialFrontEmissive.rgb + frontLightModelProductSceneColor.rgb + Ambient * materialFrontAmbient.rgb + Diffuse * materialFrontDiffuse.rgb) +
    			 specular.rgb * Specular;

    if (keyholeCanDissolve != 0) { // Isolate this conditional in hopes that the driver will use dynamic branching.
        float keyholeDistance = keyholeSdf(playerPosition, cameraPosition, vWorldCoord) + KEYHOLE_BREAKUP_SCALE * simplexNoise(vWorldCoord.xy * KEYHOLE_NOISE_SCALE);
        clip(keyholeDistance);
        color *= smoothstep(0.0, KEYHOLE_DARK_BAND_SIZE, keyholeDistance); // Darken edges. Clipped areas will end up black, but we can't see them anyway.
    }

    gl_FragColor = tonemapOutput(mix(color, fogColor.rgb, saturate(fFogFragCoord)), opacity);
}