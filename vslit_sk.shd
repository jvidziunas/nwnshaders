/*

vslit_sk.shd

*/
#include "common"
#include "sdf"

#define WORLD_COORDS_MOD_LIMIT 35.0
#define MAX_LIGHTS 8
#define MAX_BONES 128

uniform highp   mat4  m_mvp;
uniform highp   mat4  m_mv;
uniform highp   mat4  m_m;
uniform highp   mat3  m_normal;
uniform highp   mat4  m_texture;
uniform highp   mat4  m_bones [MAX_BONES];
uniform         int   idxmap  [MAX_BONES];

uniform         int   fogEnabled;
uniform mediump float fogEnd;
uniform mediump float fogStart;

uniform lowp    vec4  lightAmbient        [MAX_LIGHTS];
uniform lowp    vec4  lightDiffuse        [MAX_LIGHTS];
uniform mediump vec4  lightPosition       [MAX_LIGHTS];
uniform mediump float lightQuadraticAtten [MAX_LIGHTS];
uniform         int   numLights;

uniform mediump vec4  materialFrontAmbient;
uniform mediump vec4  materialFrontDiffuse;
uniform mediump vec4  materialFrontEmissive;
uniform lowp    vec4  frontLightModelProductSceneColor;

attribute       vec4  vPos;
attribute       vec2  vTcIn;
attribute       vec3  vNormal;
attribute       vec4  vIndex;
attribute       vec4  vWeight;

varying highp   vec4  viewPosition;
varying highp   vec3  vWorldCoord;
varying         vec2  vTc;
varying         vec2  vTcEnv;
varying         vec4  vColorOut;
varying         float fFogFragCoord;

vec3 Ambient  = vec3(0.0);
vec3 Diffuse  = vec3(0.0);

void pointLight(in int i, in vec3 normal, in vec3 viewPosition) {
    vec3  toLight     = lightPosition[i].xyz - viewPosition;
    float attenuation = 1.0 / (lightQuadraticAtten[i] * dot(toLight, toLight) + 1.0);
    float nDotL       = saturate(dot(normal, normalize(toLight)));

    Diffuse += attenuation * nDotL * lightDiffuse[i].rgb;
    Ambient += attenuation * lightAmbient[i].rgb;
}

vec4 computeLighting(in vec3 normal, in vec3 viewPosition) {
    for (int i = 0; i < numLights; i++) {
        pointLight(i, normal, viewPosition);
    }

    vec3 color = frontLightModelProductSceneColor.rgb + materialFrontEmissive.rgb +
                    Ambient * materialFrontAmbient.rgb +
                    Diffuse * materialFrontDiffuse.rgb;

    return vec4(color, materialFrontDiffuse.a);
}

void main(void) {
	int  index          = idxmap[int(vIndex.x)];
	vec4 vSkinnedPos    = (m_bones[index] * vPos) * vWeight.x;
	vec3 vSkinnedNormal = (mat3(m_bones[index]) * vNormal) * vWeight.x;

	index               = idxmap[int(vIndex.y)];
	vSkinnedPos         = (m_bones[index] * vPos) * vWeight.y + vSkinnedPos;
	vSkinnedNormal      = (mat3(m_bones[index]) * vNormal) * vWeight.y + vSkinnedNormal;

	index               = idxmap[int(vIndex.z)];
	vSkinnedPos         = (m_bones[index] * vPos) * vWeight.z + vSkinnedPos;
	vSkinnedNormal      = (mat3(m_bones[index]) * vNormal) * vWeight.z + vSkinnedNormal;

	index               = idxmap[int(vIndex.w)];
	vSkinnedPos         = (m_bones[index] * vPos) * vWeight.w + vSkinnedPos;
	vSkinnedNormal      = (mat3(m_bones[index]) * vNormal) * vWeight.w + vSkinnedNormal;

    gl_Position  = m_mvp * vSkinnedPos;
    viewPosition = m_mv  * vSkinnedPos;
    vWorldCoord  = (m_m  * vSkinnedPos).xyz;
    
    vec3 transformedNormal = normalize(m_normal * vSkinnedNormal);
	vColorOut = computeLighting(transformedNormal, viewPosition.xyz);

	vTc    = (m_texture * vec4(vTcIn.x, vTcIn.y, 0.0, 1.0)).xy;
    vTcEnv = spheremapTransform(reflect(normalize(viewPosition.xyz), transformedNormal));

    fFogFragCoord    = (fogEnabled != 0) ? ffog(viewPosition.z, fogStart, fogEnd) : 0.0;
}