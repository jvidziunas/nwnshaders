/*

fslit.shd

*/
#include "common"
#include "sdf"

#define MAX_LIGHTS 8
#define NO_ATTENUATION 0.0

uniform sampler2D   texUnit0; // base map

uniform         int   texture0Bound;

uniform lowp    vec4  fogColor;

uniform lowp    vec4  lightAmbient        [MAX_LIGHTS];
uniform lowp    vec4  lightDiffuse        [MAX_LIGHTS];
uniform mediump vec4  lightPosition       [MAX_LIGHTS];
uniform mediump float lightQuadraticAtten [MAX_LIGHTS];
uniform         int   numLights;

uniform mediump vec4  materialFrontAmbient;
uniform mediump vec4  materialFrontDiffuse;
uniform mediump vec4  materialFrontSpecular;
uniform mediump vec4  materialFrontEmissive;
uniform lowp    vec4  frontLightModelProductSceneColor;

uniform         int   keyholeCanDissolve;
uniform         vec3  playerPosition;
uniform         vec3  cameraPosition;

uniform         int   worldtimerTimeOfDay;

varying         vec4  vPosOut;
varying highp   vec3  vWorldCoord;
varying         vec3  vNormalOut;
varying         vec2  vTc;
varying         vec4  vColorOut;
varying         vec3  vStaticLightDirOut;
varying         float fFogFragCoord;

vec3 Ambient  = vec3(0.0);
vec3 Diffuse  = vec3(0.0);

struct Surface {
    vec3  normal;
};

struct Light {
    vec3  direction;
    vec3  ambient;
    vec3  color;
    float attenuationCoefficient;
};

void shadeSurface(in Surface surface, in Light light) {
    vec3  toLight     = normalize(light.direction);
    float attenuation = 1.0 / (light.attenuationCoefficient * dot(light.direction, light.direction) + 1.0);

    Ambient  += attenuation * light.ambient;
    Diffuse  += saturate(dot(surface.normal, toLight)) * attenuation * light.color;
}

//=============================================================================
//
// computeLighting()
//
// Calculates lighting contribution for all lights.
//
//=============================================================================
void computeLighting(in vec3 normal, in vec3 position) {
    Surface surface = Surface(normal);

    // Clear the light intensity accumulators
    Ambient  = vec3(0.0);
    Diffuse  = vec3(0.0);

    if (anyNonzero(vStaticLightDirOut)) {
        shadeSurface(surface, Light(vStaticLightDirOut, /*ambient =*/vec3(0.0), /*color =*/vColorOut.rgb, NO_ATTENUATION));
    } else {
        Ambient = vColorOut.rgb;
    }

    for (int light = 0; light < numLights; light++) {
        shadeSurface(surface, Light(/*direction =*/lightPosition[light].xyz - position, lightAmbient[light].rgb, lightDiffuse[light].rgb, lightQuadraticAtten[light]));
    }
}

void main (void) {
	computeLighting(normalize(vNormalOut), vPosOut.xyz);

	vec4 baseMap = (texture0Bound != 0) ? asLinear(texture2D(texUnit0, vTc.xy)) : vec4(1.0);
    vec3 color   = baseMap.rgb * (materialFrontEmissive.rgb + frontLightModelProductSceneColor.rgb + Ambient * materialFrontAmbient.rgb + Diffuse * materialFrontDiffuse.rgb);

    if (keyholeCanDissolve != 0) { // Isolate this conditional in hopes that the driver will use dynamic branching.
        float keyholeDistance = keyholeSdf(playerPosition, cameraPosition, vWorldCoord) + KEYHOLE_BREAKUP_SCALE * simplexNoise(vWorldCoord.xy * KEYHOLE_NOISE_SCALE);
        clip(keyholeDistance);
        color *= smoothstep(0.0, KEYHOLE_DARK_BAND_SIZE, keyholeDistance); // Darken edges. Clipped areas will end up black, but we can't see them anyway.
    }
	
	gl_FragColor = tonemapOutput(mix(color.rgb, fogColor.rgb, saturate(fFogFragCoord)), baseMap.a * materialFrontDiffuse.a * vColorOut.a);
}